@page "/Register"

@inject IAuthenticationRepository _authenticationRepository
@inject NavigationManager _navigationManager 

<div class="card">
    <h3 class="card-title">Register</h3>
    @if (!response)
            {
                <div class="alert alert-danger"><p>Something went wrong with registration attept...</p></div>
            }
    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email address</label>
                <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                <ValidationMessage For="@(() => Model.EmailAddress)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
                <ValidationMessage For="@(() => Model.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary btn-block">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    private bool response = true;

    private async Task HandleRegistration()
    {
        response = await _authenticationRepository.Register(Model);

        if (response)
        {
            _navigationManager.NavigateTo("/login");
        }
    }
}

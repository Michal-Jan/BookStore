@page "/books/"

@inject IBookRepository _bookRepository

<h3>Books</h3>

@if (Model == null)
{
    <div class="alert alert-dismissible alert-secondary">Loading...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in Model)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.Author.Firstname @book.Author.Lastname</td>
                    <td>
                        <a href="/books/view/@book.Id" class="btn btn-primary btn-sm"><span class="oi oi-book"></span> View</a>
                        <AuthorizeView Roles="Administrator">
                            <a href="/books/edit/@book.Id" class="btn btn-warning btn-sm"><span class="oi oi-pencil"></span> Edit</a>
                            <a href="/books/delete/@book.Id" class="btn btn-danger btn-sm"><span class="oi oi-delete"></span> Delete</a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<AuthorizeView Roles="Administrator">
    <a href="/books/create" class="btn btn-success m-2"><span class="oi oi-plus" aria-hidden="true"></span> Add new Book</a>
</AuthorizeView>

@code {
    private IList<Book> Model;

    protected async override Task OnInitializedAsync()
    {
        Model = await _bookRepository.Get(Endpoints.BooksEndpoint);
    }
}
